 //Max Circular Subarray Sum//
     //DAY-12//


class Solution {
  public:
    // arr: input array
    // Function to find maximum circular subarray sum.
    int kadensMax(vector<int> &nums,int n) {
        int sum=nums[0];
        int maxSum=nums[0];
        for(int i=1;i<n;i++)
        {
            sum=max(sum+nums[i],nums[i]);
            maxSum=max(maxSum,sum);
        }
        return maxSum;
        // your code here
    }
    int kadensMin(vector<int> &nums,int n) {
        int sum=nums[0];
        int minSum=nums[0];
        for(int i=1;i<n;i++)
        {
            sum=min(sum+nums[i],nums[i]);
            minSum=min(minSum,sum);
        }
        return minSum;
    }
    int circularSubarraySum(vector<int> &nums){
        int n=nums.size();
        int maxSum=kadensMax(nums,n);
        int minSum=kadensMin(nums,n);
        int totalsum=accumulate(nums.begin(),nums.end(),0);
            if(maxSum<0){
                return maxSum;
        }
       return max(maxSum,totalsum-minSum);
    }
};
